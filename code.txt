1.Two Sum 


C Code:

#include <stdio.h>

void twoSum(int arr[], int n, int target) {
    for(int i = 0; i < n; i++) {
        for(int j = i+1; j < n; j++) {
            if(arr[i] + arr[j] == target) {
                printf("Indices: %d and %d\n", i, j);
                return;
            }
        }
    }
    printf("No two sum solution found\n");
}


2.Binary Search



C Code

#include <stdio.h>

int binarySearch(int arr[], int n, int target) {
    int low = 0, high = n - 1;
    while(low <= high) {
        int mid = (low + high) / 2;
        if(arr[mid] == target)
            return mid;
        else if(arr[mid] < target)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}


3.Anagram Check



C Code:

#include <stdio.h>
#include <string.h>
#include <stdbool.h>

bool isAnagram(char *s1, char *s2) {
    if(strlen(s1) != strlen(s2))
        return false;
    
    int count[256] = {0};
    for(int i = 0; s1[i]; i++) {
        count[(unsigned char)s1[i]]++;
        count[(unsigned char)s2[i]]--;
    }

    for(int i = 0; i < 256; i++) {
        if(count[i] != 0)
            return false;
    }

    return true;
}


4.Longest Substring Without Repeating Characters




C Code:

#include <stdio.h>
#include <string.h>

int longestUniqueSubstring(char *s) {
    int lastIndex[256];
    for(int i = 0; i < 256; i++) lastIndex[i] = -1;

    int maxLen = 0, start = 0;
    for(int i = 0; s[i]; i++) {
        if(lastIndex[(unsigned char)s[i]] >= start)
            start = lastIndex[(unsigned char)s[i]] + 1;
        lastIndex[(unsigned char)s[i]] = i;
        if(i - start + 1 > maxLen)
            maxLen = i - start + 1;
    }
    return maxLen;
}


5.Count Palindromic Substrings



C Code:

#include <stdio.h>
#include <string.h>

int countPalindromicSubstrings(char *s) {
    int n = strlen(s), count = 0;
    for(int center = 0; center < 2 * n - 1; center++) {
        int left = center / 2;
        int right = left + center % 2;
        while(left >= 0 && right < n && s[left] == s[right]) {
            count++;
            left--;
            right++;
        }
    }
    return count;
}